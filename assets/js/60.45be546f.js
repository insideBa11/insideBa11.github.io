(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{343:function(t,a,s){"use strict";s.r(a);var r=s(14),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1-gsap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-gsap"}},[t._v("#")]),t._v(" 1.gsap")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("向右移动100像素")]),t._v(" "),a("th",[t._v("x: 100")]),t._v(" "),a("th",[t._v("transform: translateX(100px)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("向下移动100像素")]),t._v(" "),a("td",[t._v("y: 100")]),t._v(" "),a("td",[t._v("transform: translateY(100px)")])]),t._v(" "),a("tr",[a("td",[t._v("将元素沿水平方向向右移动到其父容器宽度的50%位置")]),t._v(" "),a("td",[t._v("xPercent: 50")]),t._v(" "),a("td",[t._v("transform: translateX(50%)")])]),t._v(" "),a("tr",[a("td",[t._v("将元素沿垂直方向向下移动到其父容器高度的50%位置")]),t._v(" "),a("td",[t._v("yPercent: 50")]),t._v(" "),a("td",[t._v("transform: translateY(50%)")])]),t._v(" "),a("tr",[a("td",[t._v("将元素放大两倍")]),t._v(" "),a("td",[t._v("scale: 2")]),t._v(" "),a("td",[t._v("transform: scale(2)")])]),t._v(" "),a("tr",[a("td",[t._v("将元素在水平方向上放大两倍")]),t._v(" "),a("td",[t._v("scaleX: 2")]),t._v(" "),a("td",[t._v("transform: scaleX(2)")])]),t._v(" "),a("tr",[a("td",[t._v("将元素在竖直方向上放大两倍")]),t._v(" "),a("td",[t._v("scaleY: 2")]),t._v(" "),a("td",[t._v("transform: scaleY(2)")])]),t._v(" "),a("tr",[a("td",[t._v("将元素顺时针旋转90度")]),t._v(" "),a("td",[t._v("rotation: 90")]),t._v(" "),a("td",[t._v("transform: rotate(90deg)")])]),t._v(" "),a("tr",[a("td",[t._v("顺时针旋转1.25弧度（1弧度==57.3度==360/2π）")]),t._v(" "),a("td",[t._v('rotation: "1.25rad"')]),t._v(" "),a("td",[t._v("没有对应的CSS")])]),t._v(" "),a("tr",[a("td",[t._v("水平方向扭转30度（也可以写弧度）")]),t._v(" "),a("td",[t._v("skewX: 30")]),t._v(" "),a("td",[t._v("transform: skewX(30deg)")])]),t._v(" "),a("tr",[a("td",[t._v("竖直方向扭转30度（也可以写弧度）")]),t._v(" "),a("td",[t._v("skewY: 30")]),t._v(" "),a("td",[t._v("没有对应的css")])]),t._v(" "),a("tr",[a("td",[t._v("将元素垂直中心向下偏移40%的高度设为运动中心点")]),t._v(" "),a("td",[t._v('transformOrigin: "center 40%"')]),t._v(" "),a("td",[t._v("transform-origin: center 40%")])]),t._v(" "),a("tr",[a("td",[t._v("透明度")]),t._v(" "),a("td",[t._v("opacity: 0")]),t._v(" "),a("td",[t._v("adjust the elements opacity")])]),t._v(" "),a("tr",[a("td",[t._v("同时设置元素的透明度为 0 并将其设置为不可见")]),t._v(" "),a("td",[t._v("autoAlpha: 0")]),t._v(" "),a("td",[t._v("shorthand for opacity & visibility")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("duration: 1")]),t._v(" "),a("td",[t._v("animation-duration: 1s")])]),t._v(" "),a("tr",[a("td",[t._v("无限循环")]),t._v(" "),a("td",[t._v("repeat: -1")]),t._v(" "),a("td",[t._v("animation-iteration-count: infinite")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("repeat: 2")]),t._v(" "),a("td",[t._v("animation-iteration-count: 2")])]),t._v(" "),a("tr",[a("td",[t._v("延迟两秒后进入动画")]),t._v(" "),a("td",[t._v("delay: 2")]),t._v(" "),a("td",[t._v("animation-delay: 2")])]),t._v(" "),a("tr",[a("td",[t._v("动画将来回循环执行")]),t._v(" "),a("td",[t._v("yoyo: true")]),t._v(" "),a("td",[t._v("animation-direction: alternate")])]),t._v(" "),a("tr",[a("td",[t._v("每个元素间隔0.5秒运动")]),t._v(" "),a("td",[t._v("stagger:0.5")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("控制动画的速度变化")]),t._v(" "),a("td",[t._v("ease")]),t._v(" "),a("td",[t._v("https://gsap.com/docs/v3/Eases/")])]),t._v(" "),a("tr",[a("td",[t._v("动画完成时运行的函数")]),t._v(" "),a("td",[t._v("onComplete:fun")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("设置动画重复时的暂停时间")]),t._v(" "),a("td",[t._v("repeatDelay")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("h2",{attrs:{id:"stagger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stagger"}},[t._v("#")]),t._v(" stagger")]),t._v(" "),a("p",[t._v("可配置5个参数：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("amount")]),t._v(" "),a("ul",[a("li",[t._v("类型: [数字]")]),t._v(" "),a("li",[t._v("描述: 分配给所有 stagger 的总时间量（以秒为单位）。例如，如果 amount 为 1，有 100 个元素按线性方式 stagger，那么每个子补间的启动时间之间将有 0.01 秒。如果您更愿意指定每个补间之间的特定时间，请改用 each 属性。")])])]),t._v(" "),a("li",[a("strong",[t._v("each")]),t._v(" "),a("ul",[a("li",[t._v("类型: [数字]")]),t._v(" "),a("li",[t._v("描述: 每个子补间启动时间之间的时间量（以秒为单位）。例如，如果 each 为 1（不考虑有多少元素），那么每个子补间的启动时间之间将有 1 秒的间隔。如果您更愿意指定要在 stagger 之间分配的总时间，请改用 amount 属性。")])])]),t._v(" "),a("li",[a("strong",[t._v("from")]),t._v(" "),a("ul",[a("li",[t._v("类型: [字符串 | 整数 | 数组]")]),t._v(" "),a("li",[t._v('描述: stagger 将从数组中的哪个位置开始。例如，要从特定元素开始，可以使用表示该元素在目标数组中索引的数字。因此，from:4 将从数组的第 5 个元素开始 stagger（因为数组使用零为基础的索引）。每个元素的动画将基于该元素与数组中 "from" 值的接近程度开始（越接近，越早开始）。您还可以使用以下字符串值："start"、"center"、"edges"、"random" 或 "end"（"random" 在版本 3.1.0 中添加）。如果定义了网格，还可以指定十进制值，表示在每个轴上的进度，例如 [0.5,0.5] 将是中心，[1,0] 将是右上角等。默认值: 0。')])])]),t._v(" "),a("li",[a("strong",[t._v("grid")]),t._v(" "),a("ul",[a("li",[t._v('类型: [数组 | "auto"]')]),t._v(" "),a("li",[t._v('描述: 如果元素在视觉上以网格形式显示，请指定有多少行和列（例如 grid:[9,15]），以便 GSAP 可以相应地计算相邻关系。或者使用 grid:"auto"，让 GSAP 使用 element.getBoundingClientRect() 自动计算行和列（适用于响应式布局）。默认情况下，假定网格从左上到右下流动（类似于文本在右边换行）。如果您的元素没有以均匀网格排列，请查看我们创建的 distributeByPosition() 辅助函数。')])])]),t._v(" "),a("li",[a("strong",[t._v("axis")]),t._v(" "),a("ul",[a("li",[t._v("类型: [字符串]")]),t._v(" "),a("li",[t._v("描述: x，y，null，表示沿着水平方向运动、沿着竖直方向运动和both")])])]),t._v(" "),a("li",[a("strong",[t._v("ease")]),t._v(" "),a("ul",[a("li",[t._v("类型: [字符串 | 函数]")]),t._v(" "),a("li",[t._v('描述: 分配动画启动时间的缓动。例如，"power2" 将从较大的间隔开始，然后在结束时紧密聚集。默认值: "none"。')])])])]),t._v(" "),a("p",[a("strong",[t._v("当给stagger赋值为纯数字时：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("gsap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'el'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("stagger")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于:")]),t._v("\ngsap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'el'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("stagger")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("amount")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"repeatdelay和amount的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repeatdelay和amount的区别"}},[t._v("#")]),t._v(" repeatDelay和amount的区别")]),t._v(" "),a("p",[a("code",[t._v("repeatDelay")]),t._v(" 和 "),a("code",[t._v("stagger")]),t._v(" 中的 "),a("code",[t._v("amount")]),t._v(" 在 GSAP 中用于不同的目的，它们分别控制着时间轴的整体重复延迟和动画元素之间的时间错开。")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[a("code",[t._v("repeatDelay")]),t._v(":")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("repeatDelay")]),t._v(" 是设置整个时间轴重复的延迟时间。当时间轴完成一次完整的动画序列后，会等待指定的时间再次开始。这个延迟是应用于整个时间轴的，而不是单个动画元素。")])]),t._v(" "),a("li",[a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("gsap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("repeat")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("repeatDelay")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("上述代码表示时间轴将在完成一次完整的动画序列后等待 1 秒，然后再次开始。这种延迟是应用于整个时间轴的重复过程。")])])])]),t._v(" "),a("li",[a("p",[a("strong",[a("code",[t._v("stagger")]),t._v(" 中的 "),a("code",[t._v("amount")]),t._v(":")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("stagger")]),t._v(" 中的 "),a("code",[t._v("amount")]),t._v(" 用于设置动画元素之间的时间错开。它控制了每个动画元素的启动时间相对于前一个元素的时间差。这个错开时间是相对于单个动画元素的。")])]),t._v(" "),a("li",[a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("gsap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".box"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("duration")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("stagger")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("amount")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("上述代码表示每个 "),a("code",[t._v(".box")]),t._v("元素之间的启动时间将相差 0.5 秒，从而创建一个错开的动画效果。")])])])])]),t._v(" "),a("p",[t._v("总的来说，"),a("code",[t._v("repeatDelay")]),t._v(" 是时间轴整体的重复延迟，而 "),a("code",[t._v("stagger")]),t._v(" 中的 "),a("code",[t._v("amount")]),t._v(" 是用于设置动画元素之间的时间错开。在某些情况下，你可能会同时使用它们来实现一些复杂的动画效果。")]),t._v(" "),a("h2",{attrs:{id:"整体循环和单元素循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体循环和单元素循环"}},[t._v("#")]),t._v(" 整体循环和单元素循环")]),t._v(" "),a("p",[t._v("repaet / yoyo / callbadck")]),t._v(" "),a("p",[t._v("如果将 "),a("code",[t._v("repeat")]),t._v(" 放在 tween 的配置对象的顶层，它将等待所有子 tween 完成后再重复整个序列。"),a("strong",[t._v("整体循环")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("gsap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("repeat")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("stagger")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果希望每个子 tween 独立重复（即每个 tween 完成后立即重复自身），只需将 "),a("code",[t._v("repeat")]),t._v("（ "),a("code",[t._v("yoyo")]),t._v("或者"),a("code",[t._v("callback")]),t._v("）嵌套在高级 stagger 对象中。"),a("strong",[t._v("单元素循环")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("gsap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("stagger")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("repeat")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"timeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timeline"}},[t._v("#")]),t._v(" Timeline")]),t._v(" "),a("p",[t._v("https://codepen.io/GreenSock/pen/PopXddg")]),t._v(" "),a("ol",[a("li",[t._v("纯数字：例如3，表示时间线开始后的第三秒")])]),t._v(" "),a("ul",[a("li",[t._v("= 表示结束：\n"),a("ul",[a("li",[a("code",[t._v("+=3")]),t._v("：上个时间线结束后的第三秒")]),t._v(" "),a("li",[a("code",[t._v("-=3")]),t._v("： 上个时间线结束前3秒")])])])]),t._v(" "),a("p",[a("code",[t._v("<3")]),t._v("：上个动画开始的第三秒")]),t._v(" "),a("p",[a("code",[t._v(">3")]),t._v("：上个动画结束的第三秒")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("百分比")])]),t._v(" "),a("ul",[a("li",[t._v("事件总线的百分比：\n"),a("ul",[a("li",[t._v("-=25%：时间线最后25%开始")]),t._v(" "),a("li",[t._v("+=50%：时间线结束之后开始，时间占时间线的50%")]),t._v(" "),a("li",[t._v("<25%：前一个动画25%时开始。")]),t._v(" "),a("li",[t._v("<+=25%：")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);